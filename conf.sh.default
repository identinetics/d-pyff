#!/usr/bin/env bash

# data shared between containers goes via these definitions:
dockervol_root='/docker_volumes'
shareddata_root="${dockervol_root}/01shared_data"

# configure container
export IMGID='99'  # range from 02 .. 99; must be unique per node
export IMAGENAME="rhoerbe/pyff${IMGID}"
export CONTAINERNAME="${IMGID}pyffTestWpv"
export CONTAINERUSER="pyff${IMGID}"   # group and user to run container
export CONTAINERUID="80${IMGID}"   # gid and uid for CONTAINERUSER
export BUILDARGS="
    --build-arg "USERNAME=$CONTAINERUSER" \
    --build-arg "UID=$CONTAINERUID" \
"
export ENVSETTINGS="
    -e FREQUENCY=600
    -e LOGDIR=/var/log
    -e LOGLEVEL=INFO
    -e PIDFILE=/var/log/pyffd.pid
    -e PIPELINEBATCH=/etc/pyff/md_aggregator.fd
    -e PIPELINEDAEMON=/etc/pyff/mdx_disco.fd
    -e MDSIGN_CERT=/etc/pki/metadata_crt.pem
    -e MDSIGN_KEY=/etc/pki/metadata_key.pem
    -e MD_AGGREGATE=/var/md_feed/metadata.xml
"
export NETWORKSETTINGS="
    --net http_proxy
    --ip 10.1.1.${IMGID}
"
export VOLROOT="${dockervol_root}/$CONTAINERNAME"  # container volumes on docker host
export VOLMAPPING="
    -v $VOLROOT/etc/pki:/etc/pki:Z
    -v $VOLROOT/etc/pyff:/etc/pyff:Z
    -v $VOLROOT/var/log:/var/log:Z
    -v $VOLROOT/var/md_source:/var/md_source:Z
    -v $shareddata_root/myfederation/md_feed:/var/md_feed:Z
"
export STARTCMD='/start_pyffd.sh'

# first start: create user/group/host directories
if [ $(id -u) -ne 0 ]; then
    sudo="sudo"
fi
if ! id -u $CONTAINERUSER &>/dev/null; then
    $sudo groupadd -g $CONTAINERUID $CONTAINERUSER
    $sudo groupadd -g $SHARED_CONTAINERS_GROUPID $SHARED_CONTAINERS_GROUP 2> /dev/null
    $sudo adduser -M --gid $CONTAINERUID --uid $CONTAINERUID $CONTAINERUSER  #CentOS
    #$sudo adduser --gid $CONTAINERUID --disabled-password --gecos "" --uid $CONTAINERUID $CONTAINERUSER #Debian
fi

# create dir with given user if not existing, relative to $HOSTVOLROOT; set/repair ownership
function chk_own_dir() {
    dir=$1; user=$2
    $sudo mkdir -p "$VOLROOT/$dir"
    $sudo chown -R $user:$user "$VOLROOT/$dir"
}

chk_own_dir etc/pki $CONTAINERUSER
chk_own_dir etc/pyff $CONTAINERUSER
chk_own_dir var/log $CONTAINERUSER
chk_own_dir var/md_source $CONTAINERUSER

# as above, but for shared dir
function chk_shared_dir() {
    dir=$1; user=$2; group=$3
    $sudo mkdir -p "$shareddata_root/$dir"
    $sudo chown -R $user:$group "$shareddata_root/$dir"
}

chk_shared_dir 'myfederation/md_feed' $CONTAINERUSER $SHARED_CONTAINERS_GROUP
