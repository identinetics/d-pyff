#!/usr/bin/env bash

# settings for docker build, run and exec

main() {
    SCRIPTDIR=$(cd $(dirname $BASH_SOURCE[0]) && pwd)
    source $SCRIPTDIR/dscripts/conf_lib.sh  # load library functions

    init_sudo
    #do_not_build
    set_volume_root
    set_image_and_container_name
    set_image_signature_args
    set_users
    set_buildargs
    set_run_args
    set_network
    set_vol_mapping
    #enable_x11_client
    #set_enable_sshd     # usually used only for debugging - requires installed sshd in image
}


set_volume_root() {
    DOCKERVOL_SHORT='/dv'
    DOCKERLOG_SHORT='/dl'
    if [[ "$TRAVIS" == "true" ]] || [[ ! -z ${JENKINS_HOME+x} ]]; then
        DOCKERVOL_SHORT='./dv'
        DOCKERLOG_SHORT='./dl'
    fi
    DOCKER_VOLUME_ROOT='/var/lib/docker/volumes'  # hard coded - check for your config if applicable!
}


set_image_and_container_name() {
    # This IMGID qualifies image, container, user and IP adddress; this is helpful for managing
    # processes on the docker host etc.
    #IMGID='03'  # registered default in github.com/identinetics/dscripts/templates/assigned-uids.adoc
    IMGID='99'  # dev
    PROJSHORT='pyff'
    set_staging_env
    export IMAGENAME="rhoerbe/${PROJSHORT}${IMGID}:${STAGING_ENV}"  # [a-z_0-9]
    export CONTAINERNAME="${IMGID}${PROJSHORT}-${STAGING_ENV}"
    export DOCKER_REGISTRY='index.docker.io'
}


set_image_signature_args() {
    export DIDI_SIGNER='rh@identinetics.com'  # PGP uid
    export GPG_SIGN_OPTIONS='--default-key 904F1906'
}


set_users() {
    export CONTAINERUSER="$PROJSHORT${IMGID}"   # group and user to run container
    export CONTAINERUID="3430${IMGID}"     # gid and uid for CONTAINERUSER
    export START_AS_ROOT=      # 'True' (e.g. for apache to fall back to www user)
}


set_buildargs() {
    export BUILDARGS="
        --build-arg USERNAME=$CONTAINERUSER
        --build-arg UID=$CONTAINERUID
    "
}


set_run_args() {
    export ENVSETTINGS="
        -e FREQUENCY=600
        -e LOGDIR=/var/log
        -e LOGLEVEL=INFO
        -e PIDFILE=/var/log/pyffd.pid
        -e PIPELINEBATCH=/etc/pyff/md_aggregator_sign_swcert.fd
        -e PIPELINEDAEMON=/etc/pyff/mdx_discosign.fd
        -e MDSIGN_CERT=/etc/pki/sign/certs/metadata_crt.pem
        -e MDSIGN_KEY=/etc/pki/sign/private/metadata_key.pem
        -e MD_AGGREGATE=/var/md_feed/metadata.xml
        -e MDFEED_HOST=github.com
        -e MDFEED_SSHUSER=git
        -e MDFEED_REPO=rhoerbe/mdfeedTestWpvAt
    "
    # settings if using a USB-based PKCS11 device:
    HSMUSBDEVICE='Aladdin Knowledge Systems Token JC'  # output of lsusb
    if [[ "$(lsusb | grep "$HSMUSBDEVICE")" ]] && [[ ! -z ${JENKINS_HOME+x} ]]; then
        enable_pkcs11
        export ENVSETTINGS="$ENVSETTINGS -e PYKCS11LIB=/usr/lib64/libetvTokenEngine.so"  # enable this for Safenet eTokePro
        #export ENVSETTINGS="$ENVSETTINGS -e PYKCS11LIB=/usr/lib64/pkcs11/opensc-pkcs11.so"  # enable this for generic OpenSC card
        export ENVSETTINGS="$ENVSETTINGS -e PYKCS11PIN=Secret.1"  # configure token password
    fi

    get_capabilities
    export STARTCMD='/scripts/start_pyffd.sh'  # unset or blank to use image default
}


set_network() {
    # The docker0 bridge has dynamic addresses, whereas a custom bridge allows predictable addresses
    NETWORK=dockernet
    set +e  # errexit off
    $sudo docker network ls | awk '{print $2}' | grep $NETWORK > /dev/null
    if (( $? == 1)); then
        $sudo docker network create --driver bridge --subnet=10.1.1.0/24 \
                  -o com.docker.network.bridge.name=br-$NETWORK $NETWORK
    fi
    export NETWORKSETTINGS="
        --net $NETWORK
        --ip 10.1.1.${IMGID}
    "
}


set_vol_mapping() {
    export VOLLIST=''
    export VOLMAPPING=''
    create_user $CONTAINERUSER $CONTAINERUID

    # it is good practice to map each VOLUME from the Dockerfile
    map_docker_volume "${CONTAINERNAME}.etc_pki_sign" '/etc/pki/sign' 'Z' $DOCKERVOL_SHORT
    map_docker_volume "${CONTAINERNAME}.etc_pyff" '/etc/pyff' 'Z' $DOCKERVOL_SHORT
    map_docker_volume "${CONTAINERNAME}.home_${CONTAINERUSER}_ssh" "/home/${CONTAINERUSER}/.ssh" 'Z' $DOCKERVOL_SHORT
    map_docker_volume "${CONTAINERNAME}.var_log" '/var/log' 'Z' $DOCKERLOG_SHORT
    map_docker_volume "${CONTAINERNAME}.var_md_feed" '/var/md_feed' 'z' $DOCKERVOL_SHORT
    map_docker_volume "${CONTAINERNAME}.var_md_source" '/var/md_source' 'z' $DOCKERVOL_SHORT

    if [[ ! $JENKINS_HOME ]]; then
        $sudo chown -R $CONTAINERUID:$CONTAINERUID $DOCKER_VOLUME_ROOT/$CONTAINERNAME.* 2>/dev/null || true
    fi

    export LOGFILES="
        $DOCKERLOG_SHORT/${CONTAINERNAME}.var_log/pyffd.log
        $DOCKERLOG_SHORT/${CONTAINERNAME}.var_log/pyffd.err
        $DOCKERLOG_SHORT/${CONTAINERNAME}.var_log/pyff_mdsplit.log
    "
}


container_status() {
    $sudo docker ps | head -1
    $sudo docker ps --all | egrep $CONTAINERNAME\$
    $sudo docker exec $CONTAINERNAME /scripts/status.sh
}


logrotate() {
    find $DOCKERLOG_SHORT/${CONTAINERNAME}.var_log/ -mtime +5 -exec ls -ld --time-style long-iso {} \;
}


main
